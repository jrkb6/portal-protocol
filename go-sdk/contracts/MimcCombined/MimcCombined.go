// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package MimcCombined

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MimcCombinedMetaData contains all meta data concerning the MimcCombined contract.
var MimcCombinedMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"ProofVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"VerificationFailed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"public_inputs\",\"type\":\"uint256[]\"}],\"name\":\"Verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"uint256ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b506132a78061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80637e4f7a8a1461004e5780637ecebe001461007e5780639099df1b146100ae578063ce7e51e3146100b8575b5f80fd5b61006860048036038101906100639190612abc565b6100e8565b6040516100759190612b54565b60405180910390f35b61009860048036038101906100939190612bc7565b612793565b6040516100a59190612c7c565b60405180910390f35b6100b661282d565b005b6100d260048036038101906100cd9190612ccf565b6128a5565b6040516100df9190612c7c565b60405180910390f35b5f805f90505f805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805461013590612d27565b80601f016020809104026020016040519081016040528092919081815260200182805461016190612d27565b80156101ac5780601f10610183576101008083540402835291602001916101ac565b820191905f5260205f20905b81548152906001019060200180831161018f57829003601f168201915b505050505090505f8190505f8151036101fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f190612da1565b60405180910390fd5b7f3000000000000000000000000000000000000000000000000000000000000000816001835161022a9190612dec565b8151811061023b5761023a612e1f565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146102a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029f90612da1565b60405180910390fd5b60405161022081016102b987610659565b6102c3888861066d565b6102cc896106c6565b6102d58a6106e2565b5f6102e189898d6108b8565b90506102ec81610ba7565b90506102f8818c610c0e565b9050610304818c610c89565b60608301517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010361035b85612000856125c4565b08806101a086015261036e848b8d610cf7565b8061018087015261037d611056565b6103868e6120f5565b61038f8e61207f565b6103988e611c7a565b6103a18e6117d8565b6103aa8e61157b565b6103b38e6111aa565b6101e0860151985061262e565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f77726f6e67206e756d626572206f66207075626c696320696e707574730000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6572726f72206563206f7065726174696f6e00000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e707574732061726520626967676572207468616e207200000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f77726f6e672070726f6f662073697a65000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f70656e696e677320626967676572207468616e2072000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6572726f722076657269667900000000000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6572726f722072616e646f6d2067656e206b7a670000000000000000000000006044820152606481fd5b6004811461066a576106696103c0565b5b50565b60015f5b828110156106b2577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184351082169150602084019350600181019050610671565b50806106c1576106c061047e565b5b505050565b60605f02610340018082146106de576106dd6104dd565b5b5050565b60016102a082017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610280830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610180830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001813510821691506101a0830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001813510821691506101c0830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001813510821691506101e0830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610200830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610260830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610340830190505f5b5f8110156108a4577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182351083169250602082019150600181019050610863565b50816108b3576108b261053c565b5b505050565b5f60405161022081016467616d6d6181527f2e6829d5bd08a1fb2535f93234725381e33c225ba8c51f7c453b22ba7bb9929b60208201527f144a2508f8d16705ff3f9c39a4c1cd4f830d6571682e1c65f7c9d02520deb43460408201527f06c44fc6a6df444489fe35d3f65bf156259ca5ed261cee62e485f7b5524e8f4560608201527f027176db169a3406c9bd9c198746d52dcc694e7b5ee4567d1c72c50e6adf554160808201527f0b69718cb958b23b5eb8b60114788b115fe96f0f8156ce66c267bb1d792a45f060a08201527f11e980c8ad20498cefc5d7cbdeab87613c4165212811de9a1f4f369b5813bce260c08201527e11336b4771180482cd7c43469886a07ee52d8b3aaf6cf67f90b84f4576ad0f60e08201527f30045313657533b16e49c988bda5c473d24aec39949b2048364de3aa98a4d7776101008201527f11e3912c8a924209c399a3c83739681c6b3d39a73011c47f404a71c018e4c6436101208201527f267df6567318001244aa54eea489931b2f3b2d40d00f2684813533715d1c6a496101408201527f233774fc47d352f5c949a9bad0b95f9538d66b5f54f0829b2aaa17a3c37c87aa6101608201527f0a6d026fa3e676d67207274879c8643270ef83188b261c8b96884f2b4c5cc6056101808201527f2b00f84800d3afce30c11ef16b3aafceae19881aa390122bce6f8f463a05fa926101a08201527f241f337f430e2226ab57125265f28050c36099b065f8b92f100ec21284f574736101c08201527f1025ed6ac0cdf0b485875cd3c339f4113867255031f7a9be546136c813fdad2a6101e08201527f2a4333e0ae0393295525f3d8eb448b552b52286f42f777c5fad9564efdca212961020082015261022081016020860280888337808201915060c0808784378083019250816102c50160208582601b880160025afa80610b6d57610b6c61059b565b5b855197507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188066040880152505050505050509392505050565b5f60405161022060405101636265746181528360208201526020816024601c840160025afa80610bda57610bd961059b565b5b815193507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184066020840152505050919050565b5f60405161022060405101606564616c70686182526020820186815260208101905060406102208701823760208383601b860160025afa80610c5357610c5261059b565b5b835195507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000186065f860152505050505092915050565b60405161022060405101637a657461815283602082015260c0808401604083013760208160e4601c840160025afa80610cc557610cc461059b565b5b81517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181066060850152505050505050565b5f60405160608101516101a082015186610d1381888486610d90565b5f805b88811015610d83577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001883584510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018288089650602083019250602088019750600181019050610d16565b5050505050509392505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f3062cb506d9a969cb702833453cd4c52654aa6a93775a2c5bf57d6844360800183096001855f5b86811015610e7f577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103860882527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017e6fab49b869ae62001deac878b2667bd31bf3e28e3a2d764aa49b8d9bbdd31084099250602082019150600181019050610dd9565b50610e8b818789610f46565b869050600191505f5b86811015610f3c577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001868551090982526020820191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017e6fab49b869ae62001deac878b2667bd31bf3e28e3a2d764aa49b8d9bbdd31084099250600181019050610e94565b5050505050505050565b600183525f805b83811015610f9b5781850151828401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818309905060208401935080848801525050600181019050610f4d565b5060208103820191508084019350610fdb6020850160027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010386516125c4565b5f5b8481101561104e5760208603955083517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001875184098086527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182850993506020860395505050600181019050610fdd565b505050505050565b604051610220604051016101a08201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001036060850151086110df8360027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103836125c4565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f3062cb506d9a969cb702833453cd4c52654aa6a93775a2c5bf57d68443608001820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820991505f8401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992508260808601525050505050565b6040516102208101610140820151815261016082015160208201526102c083013560408201526102e08301356060820152610220830135608082015261024083013560a082015261030083013560c082015261032083013560e082015260608201516101008201526101c08201516101208201526020816101408360025afa80611237576112366105fa565b5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018251069050816040810192506102c085013581526102e08501356020820152611287838361030088018461251c565b610140840161129c848461022089018461251c565b61012085016112b084610260890183612572565b8460408101955060018152600260208201528151604082015260408160608360075afa806112e1576112e061059b565b5b6020820180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47038152611317888487886123d4565b876040890198506113328960608c01516102c08e018461248f565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017e6fab49b869ae62001deac878b2667bd31bf3e28e3a2d764aa49b8d9bbdd31060608c0151097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818a0998506113af8a8a6103008f018561251c565b6113bb8a83898a6123d4565b6020880180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703815287518b52602088015160208c01527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260408c01527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60608c01527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60808c01527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60a08c0152885160c08c0152602089015160e08c01527f2737398fbfe68272841a0fce434285edc8c9d5e0898925994a29328f1454d2506101008c01527f141690ab5ecb2ad3e5ed37089865d3da9214b3365d2247a501038cf4a9cd649e6101208c01527f232669ccec85beb02dc746c1cc9eda0c1f2053ed267f1c923e8aa327bac7546c6101408c01527f1abdbd897f5332c891a2e6652558071782a7513bea26cb0feb75c80b6c1490656101608c01526115418b611550565b50505050505050505050505050565b60405160205f6101808460085afa5f516101e083015180838316169150816101e08501525050505050565b6040516102206040510160208101604082016101c084015180610140860160a087015161014088015260c08701516101608801526102808801356101208801526115ca868360e08a01846124c6565b6115dd826102a08a016101208a01612572565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838309915061161586835f8b016101408b0161251c565b611628826101808a016101208a01612572565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838309915061165d868360408b018461251c565b611670826101a08a016101208a01612572565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991506116a5868360808b018461251c565b6116b8826101c08a016101208a01612572565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991507f2e6829d5bd08a1fb2535f93234725381e33c225ba8c51f7c453b22ba7bb9929b86527f144a2508f8d16705ff3f9c39a4c1cd4f830d6571682e1c65f7c9d02520deb4348552611730848388846124c6565b611743826101e08a016101208a01612572565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183830991507f06c44fc6a6df444489fe35d3f65bf156259ca5ed261cee62e485f7b5524e8f4586527f027176db169a3406c9bd9c198746d52dcc694e7b5ee4567d1c72c50e6adf554185526117bb848388846124c6565b6117ce826102008a016101208a01612572565b5050505050505050565b604051610220604051016467616d6d6181526060820151602082015260a0820151604082015260c0820151606082015260e0820151608082015261010082015160a082015260c05f840160c08301377f2e6829d5bd08a1fb2535f93234725381e33c225ba8c51f7c453b22ba7bb9929b6101808201527f144a2508f8d16705ff3f9c39a4c1cd4f830d6571682e1c65f7c9d02520deb4346101a08201527f06c44fc6a6df444489fe35d3f65bf156259ca5ed261cee62e485f7b5524e8f456101c08201527f027176db169a3406c9bd9c198746d52dcc694e7b5ee4567d1c72c50e6adf55416101e0820152610200610280840135818301526102a084013560208201830152610180840135604082018301526101a0840135606082018301526101c0840135608082018301526101e084013560a0820183015261020084013560c0820183015260e0810182016102608501358152601b60035f0260170160208102600501905060206101c087018284880160025afa8061195b5761195a61059b565b5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c0880151066101c08801525050505050505050565b604051610220604051017e11336b4771180482cd7c43469886a07ee52d8b3aaf6cf67f90b84f4576ad0f81527f30045313657533b16e49c988bda5c473d24aec39949b2048364de3aa98a4d77760208201526119fc604082016101808501358360e08601612458565b7f11e3912c8a924209c399a3c83739681c6b3d39a73011c47f404a71c018e4c64381527f267df6567318001244aa54eea489931b2f3b2d40d00f2684813533715d1c6a496020820152611a5c604082016101a08501358360e086016124c6565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a0840135610180850135097f233774fc47d352f5c949a9bad0b95f9538d66b5f54f0829b2aaa17a3c37c87aa82527f0a6d026fa3e676d67207274879c8643270ef83188b261c8b96884f2b4c5cc6056020830152611ae560408301828460e087016124c6565b7f2b00f84800d3afce30c11ef16b3aafceae19881aa390122bce6f8f463a05fa9282527f241f337f430e2226ab57125265f28050c36099b065f8b92f100ec21284f574736020830152611b45604083016101c08601358460e087016124c6565b7f1025ed6ac0cdf0b485875cd3c339f4113867255031f7a9be546136c813fdad2a82527f2a4333e0ae0393295525f3d8eb448b552b52286f42f777c5fad9564efdca21296020830152611ba3604083018360e0860160e087016123d4565b610340840161034085015f5b5f811015611bef578135855260208201356020860152611bd86040860184358760e08a016124c6565b602083019250604082019150600181019050611baf565b507f0b69718cb958b23b5eb8b60114788b115fe96f0f8156ce66c267bb1d792a45f084527f11e980c8ad20498cefc5d7cbdeab87613c4165212811de9a1f4f369b5813bce26020850152611c4b60408501888660e089016124c6565b61022086013584526102408601356020850152611c7060408501898660e089016124c6565b5050505050505050565b6040516020810151604082015160608301515f8401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184610260880135097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101e088013586097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610180890135820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161020089013587097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08a0135820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000186820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600580097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001878a097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808d0135820895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189870895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016005820994507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08d0135860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820993507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08d0135850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018587097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018582099050807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010390507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160808d01518208905061207081858f611993565b50505050505050505050505050565b6040516002612000016102206040510161209e818360608601516125c4565b6120b18282610140880160a0880161248f565b6120c782610100870160a0870160a08801612416565b6120d9828260a0870160a08801612458565b6120ee8260c0870160a0870160a08801612416565b5050505050565b604051610220604051017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208301516101e08501350981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604083015182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808401358251088152602081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208401516102008601350981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604084015182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08501358251088152604082017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408501516101c08701350881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001825184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001815184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000015f85015184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102608601358451098352606083017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808601516102a08801350881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001845182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160808601517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010382510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a086015161028088013509835282518151146101e0860152505050505050565b6040518251855260208301516020860152835160408601526020840151606086015260408260808760065afa8061240e5761240d61041f565b5b505050505050565b6040518251855260208301516020860152833560408601526020840135606086015260408260808760065afa806124505761244f61041f565b5b505050505050565b604051825185526020830151602086015283604086015260408260608760075afa806124875761248661041f565b5b505050505050565b604051823585526020830135602086015283604086015260408260608760075afa806124be576124bd61041f565b5b505050505050565b604051825185526020830151602086015283604086015260408560608760075afa825160408701526020830151606087015260408360808860065afa81169050806125145761251361041f565b5b505050505050565b604051823585526020830135602086015283604086015260408560608760075afa825160408701526020830151606087015260408360808860065afa811690508061256a5761256961041f565b5b505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838335097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181835108825250505050565b5f60208452602080850152602060408501528160608501528260808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a085015260208460c08660055afa5f81036126225761262161059b565b5b84519150509392505050565b50505050505082612687573373ffffffffffffffffffffffffffffffffffffffff167f4c87e2b695a6641e4d63f88e9d449494080344c0c2700faaf708e320b2c2f8bf60405160405180910390a25f935050505061278b565b7f310000000000000000000000000000000000000000000000000000000000000081600183516126b79190612dec565b815181106126c8576126c7612e1f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350805f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20908161273f9190613016565b503373ffffffffffffffffffffffffffffffffffffffff167f9cbb2c694eed9687ad9654ae462269807cc8b44f6dbd076f296bd916f1f3d0cd60405160405180910390a2600193505050505b949350505050565b5f602052805f5260405f205f9150905080546127ae90612d27565b80601f01602080910402602001604051908101604052809291908181526020018280546127da90612d27565b80156128255780601f106127fc57610100808354040283529160200191612825565b820191905f5260205f20905b81548152906001019060200180831161280857829003601f168201915b505050505081565b5f612837446128a5565b6040516020016128479190613145565b6040516020818303038152906040529050805f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090816128a19190613016565b5050565b60605f82036128eb576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506129f9565b5f8290505f5b5f821461291a5780806129039061316a565b915050600a8261291391906131de565b91506128f1565b5f8167ffffffffffffffff81111561293557612934612e4c565b5b6040519080825280601f01601f1916602001820160405280156129675781602001600182028036833780820191505090505b5090505b5f85146129f25760018261297f9190612dec565b9150600a8561298e919061320e565b603061299a919061323e565b60f81b8183815181106129b0576129af612e1f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600a856129eb91906131de565b945061296b565b8093505050505b919050565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112612a2757612a26612a06565b5b8235905067ffffffffffffffff811115612a4457612a43612a0a565b5b602083019150836001820283011115612a6057612a5f612a0e565b5b9250929050565b5f8083601f840112612a7c57612a7b612a06565b5b8235905067ffffffffffffffff811115612a9957612a98612a0a565b5b602083019150836020820283011115612ab557612ab4612a0e565b5b9250929050565b5f805f8060408587031215612ad457612ad36129fe565b5b5f85013567ffffffffffffffff811115612af157612af0612a02565b5b612afd87828801612a12565b9450945050602085013567ffffffffffffffff811115612b2057612b1f612a02565b5b612b2c87828801612a67565b925092505092959194509250565b5f8115159050919050565b612b4e81612b3a565b82525050565b5f602082019050612b675f830184612b45565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612b9682612b6d565b9050919050565b612ba681612b8c565b8114612bb0575f80fd5b50565b5f81359050612bc181612b9d565b92915050565b5f60208284031215612bdc57612bdb6129fe565b5b5f612be984828501612bb3565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612c29578082015181840152602081019050612c0e565b5f8484015250505050565b5f601f19601f8301169050919050565b5f612c4e82612bf2565b612c588185612bfc565b9350612c68818560208601612c0c565b612c7181612c34565b840191505092915050565b5f6020820190508181035f830152612c948184612c44565b905092915050565b5f819050919050565b612cae81612c9c565b8114612cb8575f80fd5b50565b5f81359050612cc981612ca5565b92915050565b5f60208284031215612ce457612ce36129fe565b5b5f612cf184828501612cbb565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612d3e57607f821691505b602082108103612d5157612d50612cfa565b5b50919050565b7f76657269666965722d696e76616c69642d6e6f6e6365000000000000000000005f82015250565b5f612d8b601683612bfc565b9150612d9682612d57565b602082019050919050565b5f6020820190508181035f830152612db881612d7f565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612df682612c9c565b9150612e0183612c9c565b9250828203905081811115612e1957612e18612dbf565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612ed57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612e9a565b612edf8683612e9a565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612f1a612f15612f1084612c9c565b612ef7565b612c9c565b9050919050565b5f819050919050565b612f3383612f00565b612f47612f3f82612f21565b848454612ea6565b825550505050565b5f90565b612f5b612f4f565b612f66818484612f2a565b505050565b5b81811015612f8957612f7e5f82612f53565b600181019050612f6c565b5050565b601f821115612fce57612f9f81612e79565b612fa884612e8b565b81016020851015612fb7578190505b612fcb612fc385612e8b565b830182612f6b565b50505b505050565b5f82821c905092915050565b5f612fee5f1984600802612fd3565b1980831691505092915050565b5f6130068383612fdf565b9150826002028217905092915050565b61301f82612bf2565b67ffffffffffffffff81111561303857613037612e4c565b5b6130428254612d27565b61304d828285612f8d565b5f60209050601f83116001811461307e575f841561306c578287015190505b6130768582612ffb565b8655506130dd565b601f19841661308c86612e79565b5f5b828110156130b35784890151825560018201915060208501945060208101905061308e565b868310156130d057848901516130cc601f891682612fdf565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f6130f982612bf2565b61310381856130e5565b9350613113818560208601612c0c565b80840191505092915050565b7f3000000000000000000000000000000000000000000000000000000000000000815250565b5f61315082846130ef565b915061315b8261311f565b60018201915081905092915050565b5f61317482612c9c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131a6576131a5612dbf565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6131e882612c9c565b91506131f383612c9c565b925082613203576132026131b1565b5b828204905092915050565b5f61321882612c9c565b915061322383612c9c565b925082613233576132326131b1565b5b828206905092915050565b5f61324882612c9c565b915061325383612c9c565b925082820190508082111561326b5761326a612dbf565b5b9291505056fea26469706673582212207a0b2691fb468397d699b43731df3313d454fa0a16a6d205d7fc1370b141e2bc64736f6c63430008140033",
}

// MimcCombinedABI is the input ABI used to generate the binding from.
// Deprecated: Use MimcCombinedMetaData.ABI instead.
var MimcCombinedABI = MimcCombinedMetaData.ABI

// MimcCombinedBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MimcCombinedMetaData.Bin instead.
var MimcCombinedBin = MimcCombinedMetaData.Bin

// DeployMimcCombined deploys a new Ethereum contract, binding an instance of MimcCombined to it.
func DeployMimcCombined(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MimcCombined, error) {
	parsed, err := MimcCombinedMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MimcCombinedBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MimcCombined{MimcCombinedCaller: MimcCombinedCaller{contract: contract}, MimcCombinedTransactor: MimcCombinedTransactor{contract: contract}, MimcCombinedFilterer: MimcCombinedFilterer{contract: contract}}, nil
}

// MimcCombined is an auto generated Go binding around an Ethereum contract.
type MimcCombined struct {
	MimcCombinedCaller     // Read-only binding to the contract
	MimcCombinedTransactor // Write-only binding to the contract
	MimcCombinedFilterer   // Log filterer for contract events
}

// MimcCombinedCaller is an auto generated read-only Go binding around an Ethereum contract.
type MimcCombinedCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MimcCombinedTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MimcCombinedTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MimcCombinedFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MimcCombinedFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MimcCombinedSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MimcCombinedSession struct {
	Contract     *MimcCombined     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MimcCombinedCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MimcCombinedCallerSession struct {
	Contract *MimcCombinedCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// MimcCombinedTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MimcCombinedTransactorSession struct {
	Contract     *MimcCombinedTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// MimcCombinedRaw is an auto generated low-level Go binding around an Ethereum contract.
type MimcCombinedRaw struct {
	Contract *MimcCombined // Generic contract binding to access the raw methods on
}

// MimcCombinedCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MimcCombinedCallerRaw struct {
	Contract *MimcCombinedCaller // Generic read-only contract binding to access the raw methods on
}

// MimcCombinedTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MimcCombinedTransactorRaw struct {
	Contract *MimcCombinedTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMimcCombined creates a new instance of MimcCombined, bound to a specific deployed contract.
func NewMimcCombined(address common.Address, backend bind.ContractBackend) (*MimcCombined, error) {
	contract, err := bindMimcCombined(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MimcCombined{MimcCombinedCaller: MimcCombinedCaller{contract: contract}, MimcCombinedTransactor: MimcCombinedTransactor{contract: contract}, MimcCombinedFilterer: MimcCombinedFilterer{contract: contract}}, nil
}

// NewMimcCombinedCaller creates a new read-only instance of MimcCombined, bound to a specific deployed contract.
func NewMimcCombinedCaller(address common.Address, caller bind.ContractCaller) (*MimcCombinedCaller, error) {
	contract, err := bindMimcCombined(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MimcCombinedCaller{contract: contract}, nil
}

// NewMimcCombinedTransactor creates a new write-only instance of MimcCombined, bound to a specific deployed contract.
func NewMimcCombinedTransactor(address common.Address, transactor bind.ContractTransactor) (*MimcCombinedTransactor, error) {
	contract, err := bindMimcCombined(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MimcCombinedTransactor{contract: contract}, nil
}

// NewMimcCombinedFilterer creates a new log filterer instance of MimcCombined, bound to a specific deployed contract.
func NewMimcCombinedFilterer(address common.Address, filterer bind.ContractFilterer) (*MimcCombinedFilterer, error) {
	contract, err := bindMimcCombined(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MimcCombinedFilterer{contract: contract}, nil
}

// bindMimcCombined binds a generic wrapper to an already deployed contract.
func bindMimcCombined(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MimcCombinedABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MimcCombined *MimcCombinedRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MimcCombined.Contract.MimcCombinedCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MimcCombined *MimcCombinedRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MimcCombined.Contract.MimcCombinedTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MimcCombined *MimcCombinedRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MimcCombined.Contract.MimcCombinedTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MimcCombined *MimcCombinedCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MimcCombined.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MimcCombined *MimcCombinedTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MimcCombined.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MimcCombined *MimcCombinedTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MimcCombined.Contract.contract.Transact(opts, method, params...)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(string)
func (_MimcCombined *MimcCombinedCaller) Nonces(opts *bind.CallOpts, arg0 common.Address) (string, error) {
	var out []interface{}
	err := _MimcCombined.contract.Call(opts, &out, "nonces", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(string)
func (_MimcCombined *MimcCombinedSession) Nonces(arg0 common.Address) (string, error) {
	return _MimcCombined.Contract.Nonces(&_MimcCombined.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(string)
func (_MimcCombined *MimcCombinedCallerSession) Nonces(arg0 common.Address) (string, error) {
	return _MimcCombined.Contract.Nonces(&_MimcCombined.CallOpts, arg0)
}

// Uint256ToString is a free data retrieval call binding the contract method 0xce7e51e3.
//
// Solidity: function uint256ToString(uint256 value) pure returns(string)
func (_MimcCombined *MimcCombinedCaller) Uint256ToString(opts *bind.CallOpts, value *big.Int) (string, error) {
	var out []interface{}
	err := _MimcCombined.contract.Call(opts, &out, "uint256ToString", value)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uint256ToString is a free data retrieval call binding the contract method 0xce7e51e3.
//
// Solidity: function uint256ToString(uint256 value) pure returns(string)
func (_MimcCombined *MimcCombinedSession) Uint256ToString(value *big.Int) (string, error) {
	return _MimcCombined.Contract.Uint256ToString(&_MimcCombined.CallOpts, value)
}

// Uint256ToString is a free data retrieval call binding the contract method 0xce7e51e3.
//
// Solidity: function uint256ToString(uint256 value) pure returns(string)
func (_MimcCombined *MimcCombinedCallerSession) Uint256ToString(value *big.Int) (string, error) {
	return _MimcCombined.Contract.Uint256ToString(&_MimcCombined.CallOpts, value)
}

// Verify is a paid mutator transaction binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) returns(bool success)
func (_MimcCombined *MimcCombinedTransactor) Verify(opts *bind.TransactOpts, proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _MimcCombined.contract.Transact(opts, "Verify", proof, public_inputs)
}

// Verify is a paid mutator transaction binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) returns(bool success)
func (_MimcCombined *MimcCombinedSession) Verify(proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _MimcCombined.Contract.Verify(&_MimcCombined.TransactOpts, proof, public_inputs)
}

// Verify is a paid mutator transaction binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) returns(bool success)
func (_MimcCombined *MimcCombinedTransactorSession) Verify(proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _MimcCombined.Contract.Verify(&_MimcCombined.TransactOpts, proof, public_inputs)
}

// SetNonce is a paid mutator transaction binding the contract method 0x9099df1b.
//
// Solidity: function setNonce() returns()
func (_MimcCombined *MimcCombinedTransactor) SetNonce(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MimcCombined.contract.Transact(opts, "setNonce")
}

// SetNonce is a paid mutator transaction binding the contract method 0x9099df1b.
//
// Solidity: function setNonce() returns()
func (_MimcCombined *MimcCombinedSession) SetNonce() (*types.Transaction, error) {
	return _MimcCombined.Contract.SetNonce(&_MimcCombined.TransactOpts)
}

// SetNonce is a paid mutator transaction binding the contract method 0x9099df1b.
//
// Solidity: function setNonce() returns()
func (_MimcCombined *MimcCombinedTransactorSession) SetNonce() (*types.Transaction, error) {
	return _MimcCombined.Contract.SetNonce(&_MimcCombined.TransactOpts)
}

// MimcCombinedProofVerifiedIterator is returned from FilterProofVerified and is used to iterate over the raw logs and unpacked data for ProofVerified events raised by the MimcCombined contract.
type MimcCombinedProofVerifiedIterator struct {
	Event *MimcCombinedProofVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MimcCombinedProofVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MimcCombinedProofVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MimcCombinedProofVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MimcCombinedProofVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MimcCombinedProofVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MimcCombinedProofVerified represents a ProofVerified event raised by the MimcCombined contract.
type MimcCombinedProofVerified struct {
	Identity common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterProofVerified is a free log retrieval operation binding the contract event 0x9cbb2c694eed9687ad9654ae462269807cc8b44f6dbd076f296bd916f1f3d0cd.
//
// Solidity: event ProofVerified(address indexed identity)
func (_MimcCombined *MimcCombinedFilterer) FilterProofVerified(opts *bind.FilterOpts, identity []common.Address) (*MimcCombinedProofVerifiedIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _MimcCombined.contract.FilterLogs(opts, "ProofVerified", identityRule)
	if err != nil {
		return nil, err
	}
	return &MimcCombinedProofVerifiedIterator{contract: _MimcCombined.contract, event: "ProofVerified", logs: logs, sub: sub}, nil
}

// WatchProofVerified is a free log subscription operation binding the contract event 0x9cbb2c694eed9687ad9654ae462269807cc8b44f6dbd076f296bd916f1f3d0cd.
//
// Solidity: event ProofVerified(address indexed identity)
func (_MimcCombined *MimcCombinedFilterer) WatchProofVerified(opts *bind.WatchOpts, sink chan<- *MimcCombinedProofVerified, identity []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _MimcCombined.contract.WatchLogs(opts, "ProofVerified", identityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MimcCombinedProofVerified)
				if err := _MimcCombined.contract.UnpackLog(event, "ProofVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProofVerified is a log parse operation binding the contract event 0x9cbb2c694eed9687ad9654ae462269807cc8b44f6dbd076f296bd916f1f3d0cd.
//
// Solidity: event ProofVerified(address indexed identity)
func (_MimcCombined *MimcCombinedFilterer) ParseProofVerified(log types.Log) (*MimcCombinedProofVerified, error) {
	event := new(MimcCombinedProofVerified)
	if err := _MimcCombined.contract.UnpackLog(event, "ProofVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MimcCombinedVerificationFailedIterator is returned from FilterVerificationFailed and is used to iterate over the raw logs and unpacked data for VerificationFailed events raised by the MimcCombined contract.
type MimcCombinedVerificationFailedIterator struct {
	Event *MimcCombinedVerificationFailed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MimcCombinedVerificationFailedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MimcCombinedVerificationFailed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MimcCombinedVerificationFailed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MimcCombinedVerificationFailedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MimcCombinedVerificationFailedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MimcCombinedVerificationFailed represents a VerificationFailed event raised by the MimcCombined contract.
type MimcCombinedVerificationFailed struct {
	Identity common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterVerificationFailed is a free log retrieval operation binding the contract event 0x4c87e2b695a6641e4d63f88e9d449494080344c0c2700faaf708e320b2c2f8bf.
//
// Solidity: event VerificationFailed(address indexed identity)
func (_MimcCombined *MimcCombinedFilterer) FilterVerificationFailed(opts *bind.FilterOpts, identity []common.Address) (*MimcCombinedVerificationFailedIterator, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _MimcCombined.contract.FilterLogs(opts, "VerificationFailed", identityRule)
	if err != nil {
		return nil, err
	}
	return &MimcCombinedVerificationFailedIterator{contract: _MimcCombined.contract, event: "VerificationFailed", logs: logs, sub: sub}, nil
}

// WatchVerificationFailed is a free log subscription operation binding the contract event 0x4c87e2b695a6641e4d63f88e9d449494080344c0c2700faaf708e320b2c2f8bf.
//
// Solidity: event VerificationFailed(address indexed identity)
func (_MimcCombined *MimcCombinedFilterer) WatchVerificationFailed(opts *bind.WatchOpts, sink chan<- *MimcCombinedVerificationFailed, identity []common.Address) (event.Subscription, error) {

	var identityRule []interface{}
	for _, identityItem := range identity {
		identityRule = append(identityRule, identityItem)
	}

	logs, sub, err := _MimcCombined.contract.WatchLogs(opts, "VerificationFailed", identityRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MimcCombinedVerificationFailed)
				if err := _MimcCombined.contract.UnpackLog(event, "VerificationFailed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerificationFailed is a log parse operation binding the contract event 0x4c87e2b695a6641e4d63f88e9d449494080344c0c2700faaf708e320b2c2f8bf.
//
// Solidity: event VerificationFailed(address indexed identity)
func (_MimcCombined *MimcCombinedFilterer) ParseVerificationFailed(log types.Log) (*MimcCombinedVerificationFailed, error) {
	event := new(MimcCombinedVerificationFailed)
	if err := _MimcCombined.contract.UnpackLog(event, "VerificationFailed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
